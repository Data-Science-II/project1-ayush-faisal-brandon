x3 = under2000
flagfit3 = lm(ystar~x1 + x2 + x3 + I(x1^2) + x1:x2 + x1:x3 + I(x1^2):x2 + I(x1^2):x3)
summary(flagfit3)
par(mfrow = c(2,2))
plot(flagfit3)
flagfit4 = lm(ystar~x1 + x2 + x3 + I(x1^2) + x1:x3 + I(x1^2):x3)
summary(flagfit4)
anova(flagfit3, flagfit4)
flagfit4 = lm(ystar~x1 + x2 + x3 + I(x1^2) + x1:x3 + I(x1^2):x3)
anova(flagfit3, flagfit4)
summary(flagfit4)
par(mfrow = c(2,2))
plot(flagfit4)
hours = employee$HOURS[-13]
wages = employee$WAGES[-13]
employeeFit2 = lm(hours ~ wages)
summary(employeeFit2)
par(mfrow = c(2,2))
plot(employeeFit2)
par(mfrow = c(2,2))
plot(employeeFit)
x = 0.03*5
y = 0.0001*5
z = -0.00002*5
x^2+y^2+z^2
sqrt(x^2+y^2+z^2)
pnorm(.90)
?norm
qnorm(.9)
qnorm(.9)*0.15
1.25 - qnorm(.9)*0.15
1.125 - qnorm(.9)*0.15
1.125 + qnorm(.9)*0.15
1.125 + qnorm(.95)*0.15
1.125 + qnorm(.95)*0.15
qnorm(.95)
1.125 - qnorm(.95)*0.15
pchisq(7.5, 2)
pchisq(7.5, 2)
1-pchisq(7.5, 2)
3.35^2
pnorm(6)
1-pnorm(6) * 2
1-pnorm(6)
(1-pnorm(6))*2
49987.88-44488.44
sqrt(305.406^2+265.495^2)
49987.88-44488.44-1.96*404.673
49987.88-44488.44+1.96*404.673
700.6716*65-512.7336
700.6716*67-512.7336
700.6716*70-512.7336
0.34*26,000/2.4
0.34*26000/2.4
32000-3683.33*14
3683.33*12-19566.62
520.4-5.82*22
-5.82*4
520.4-5.82*21.4
?step
setwd("D:/CS4360/project1/R/")
red_wine = read.csv("../data/WineQuality/winequality-red.csv", sep = ";")
white_wine = read.csv("../data/WineQuality/winequality-white.csv", sep = ";")
head(red_wine)
head(white_wine)
full_formula = as.formula(quality ~ fixed.acidity +
volatile.acidity + citric.acid +
residual.sugar + chlorides +
free.sulfur.dioxide + total.sulfur.dioxide +
density + pH + sulphates + alcohol + I(residual.sugar^2))
empty_formula = as.formula(quality~1)
add1(lm(empty_formula, data = red_wine),
scope = list(upper = lm(full_formula, data = red_wine)))
full_formula = as.formula(quality ~ fixed.acidity +
volatile.acidity + citric.acid +
residual.sugar + chlorides +
free.sulfur.dioxide + total.sulfur.dioxide +
density + pH + sulphates + alcohol + I(residual.sugar^2))
empty_formula = as.formula(quality~1)
add1(lm(empty_formula, data = red_wine),
scope = list(upper = lm(full_formula, data = red_wine)),
direction = "forward")
add1(lm(empty_formula, data = red_wine),
scope = list(upper = (lm(full_formula, data = red_wine))))
library(ggplot2)
library(reshape2)
source("regression_utils.R")
red_wine = read.csv("../data/WineQuality/winequality-red.csv", sep = ";")
white_wine = read.csv("../data/WineQuality/winequality-white.csv", sep = ";")
full_formula = as.formula(quality ~ fixed.acidity +
volatile.acidity + citric.acid +
residual.sugar + chlorides +
free.sulfur.dioxide + total.sulfur.dioxide +
density + pH + sulphates + alcohol + I(residual.sugar^2))
empty_formula = as.formula(quality~1)
#("output/wine/red_forward_selectionR.txt")
add1(lm(empty_formula, data = red_wine),
scope = list(upper = (lm(full_formula, data = red_wine))))
add1(lm(empty_formula, data = red_wine),
scope=list(upper = (lm(full_formula, data = red_wine))))
###feature selection
#feature selection using forward selection
full_formula = as.formula(quality ~ fixed.acidity +
volatile.acidity + citric.acid +
residual.sugar + chlorides +
free.sulfur.dioxide + total.sulfur.dioxide +
density + pH + sulphates + alcohol)
add1(lm(empty_formula, data = red_wine),
scope=list(upper = (lm(full_formula, data = red_wine))))
drop1(lm(full_formula, data = red_wine))
drop1(lm(full_formula, data = red_wine))
drop1(lm(full_formula, data = red_wine), trace = TRUE)
step(lm(empty_formula, data = red_wine),
scope=list(upper = (lm(full_formula, data = red_wine))),
direction = "forward")
drop1(lm(full_formula, data = red_wine), trace = TRUE)
drop1(lm(full_formula, data = red_wine), trace = TRUE)
drop1(lm(full_formula, data = red_wine), trace = TRUE, x = matrix())
step(lm(empty_formula, data = red_wine),
scope=list(upper = (lm(full_formula, data = red_wine))),
direction = "forward")
drop1(lm(full_formula, data = red_wine), trace = TRUE, x = matrix())
library(MASS)
forward = step(lm(empty_formula, data = red_wine),
scope=list(upper = (lm(full_formula, data = red_wine))),
direction = "forward")
View(forward)
forward = stepAIC(lm(empty_formula, data = red_wine),
scope=list(upper = (lm(full_formula, data = red_wine))),
direction = "forward")
View(forward)
###feature selection
#feature selection using forward selection
full_formula = as.formula(red_wine[,-12], red_wine$quality)
forward = stepAIC(lm(empty_formula, data = red_wine),
scope=list(upper = (lm(full_formula, data = red_wine))),
direction = "forward")
###feature selection
#feature selection using forward selection
full_formula = as.formula(red_wine[,-12], red_wine$quality)
("../data/WineQuality/winequality-red.csv", sep = ";")
ll_formula = lm(white_wine[,-12], white_wine$quality)
empty_formula = lm(white_wine$quality ~ 1)
#("output/wine/red_forward_selectionR.txt")
forward = stepAIC(lm(empty_formula, data = red_wine),
scope=list(upper = (lm(full_formula, data = red_wine))),
direction = "forward")
white_wine = read.csv("../data/WineQuality/winequality-white.csv", sep = ";")
library(ggplot2)
library(reshape2)
library(MASS)
source("regression_utils.R")
white_wine = read.csv("../data/WineQuality/winequality-white.csv", sep = ";")
head(white_wine)
full_formula = lm(white_wine[,-12], white_wine$quality)
empty_formula = lm(white_wine$quality ~ 1)
#("output/wine/red_forward_selectionR.txt")
forward = stepAIC(lm(empty_formula, data = red_wine),
scope=list(upper = (lm(full_formula, data = red_wine))),
direction = "forward")
forward = stepAIC(empty_formula,
scope=list(upper = full_formula),
direction = "forward")
###feature selection
#feature selection using forward selection
full_formula = lm(white_wine$quality ~ .)
###feature selection
#feature selection using forward selection
full_formula = lm(white_wine$quality ~ ., data = white_wine)
empty_formula = lm(white_wine$quality ~ 1)
forward = stepAIC(empty_formula,
scope=list(upper = full_formula),
direction = "forward")
full_formula = lm(quality ~ ., data = white_wine)
empty_formula = lm(quality ~ 1, data = white_wine)
#("output/wine/red_forward_selectionR.txt")
forward = stepAIC(empty_formula,
scope=list(upper = full_formula),
direction = "forward")
forward$anova
#("output/wine/red_forward_selectionR.txt")
add1(empty_formula, scope = list(upper = full_formula))
#("output/wine/red_forward_selectionR.txt")
add1(empty_formula, ~.)
names(red_wine)
red_wine = read.csv("../data/WineQuality/winequality-red.csv", sep = ";")
head(red_wine)
?poly
lm(quality ~ poly(fixed.acidity, 2))
lm(quality ~ poly(fixed.acidity, 2), data = red_wine)
lm(quality ~ poly(fixed.acidity, volatile.acidity, 2), data = red_wine)
lm(quality ~ poly(fixed.acidity, volatile.acidity, degree = 2), data = red_wine)
lm(quality ~ poly(fixed.acidity, volatile.acidity, sulphates, citric.acid, residual.sugar,
chlorides, free.sulfar.dioxide, total.sulfur.dioxide, density, pH, alcohol, degree = 2), data = red_wine)
lm(quality ~ poly(fixed.acidity, volatile.acidity, sulphates, citric.acid, residual.sugar,
chlorides, free.sulfur.dioxide, total.sulfur.dioxide, density, pH, alcohol, degree = 2), data = red_wine)
lm(quality ~ poly(red_wine[,-12]), data = red_wine)
full_model_quad = lm(quality ~ poly(fixed.acidity, volatile.acidity, sulphates, citric.acid, residual.sugar,
chlorides, free.sulfur.dioxide, total.sulfur.dioxide, density, pH, alcohol, degree = 2), data = red_wine)
summary(full_model_quad)
full_model_quad = lm(quality ~ fixed.acidity + I(fixed.acidity^2) + volatile.acidity + I(volatile.acidity^2) +
sulphates + I(sulphates^2) + citric.acid + I(citric.acid^2) +
residual.sugar + I(residual.sugar^2) + chlorides + I(chlorides^2) +
free.sulfur.dioxide + I(free.sulfur.dioxide^2) + total.sulfur.dioxide + I(total.sulfur.dioxide^2) +
density + I(density^2) + pH + I(pH^2) + alcohol + I(alcohol^2), data = red_wine)
summary(full_model_quad)
forward_quad = step(empty_formula,
scope=list(upper = full_model_quad),
direction = "forward")
forward_quad = step(empty_formula,
scope=list(upper = full_model_quad),
direction = "forward", trace = FALSE)
backward_quad = step(full_model_quad,
direction = "backward", trace = FALSE)
stepwise_quad = step(empty_formula,
scope=list(upper = full_model_quad),
direction = "both", trace = FALSE)
forward_quad
summary(forward_quad)
library(ggplot2)
library(reshape2)
source("regression_utils.R")
red_wine = read.csv("../data/WineQuality/winequality-red.csv", sep = ";")
head(red_wine)
##Exploratory Data Analysis
#correlation matrices to determine collinearity
plot_cormat(red_wine)
#reproducibility for both dataframes (red_wine, white_wine)
scatter(red_wine, "quality", col = 3, row = 4)
###feature selection
#feature selection using forward selection
full_formula = lm(quality ~ ., data = red_wine)
empty_formula = lm(quality ~ 1, data = red_wine)
#("output/wine/red_forward_selectionR.txt")
step(empty_formula,
scope=list(upper = full_formula),
direction = "forward")
step(lm(full_formula, data = red_wine),
direction = "backward")
step(lm(empty_formula, data = red_wine),
scope=list(upper = (lm(full_formula, data = red_wine))),
direction = "both")
full_model_quad = lm(quality ~ fixed.acidity + I(fixed.acidity^2) + volatile.acidity + I(volatile.acidity^2) +
sulphates + I(sulphates^2) + citric.acid + I(citric.acid^2) +
residual.sugar + I(residual.sugar^2) + chlorides + I(chlorides^2) +
free.sulfur.dioxide + I(free.sulfur.dioxide^2) + total.sulfur.dioxide + I(total.sulfur.dioxide^2) +
density + I(density^2) + pH + I(pH^2) + alcohol + I(alcohol^2), data = red_wine)
forward_quad = step(empty_formula,
scope=list(upper = full_model_quad),
direction = "forward", trace = FALSE)
backward_quad = step(full_model_quad,
direction = "backward", trace = FALSE)
stepwise_quad = step(empty_formula,
scope=list(upper = full_model_quad),
direction = "both", trace = FALSE)
summary(forward_quad)
summary(forward_quad)
summary(backward_quad)
summary(stepwise_quad)
full_model_quadX = lm(quality ~ (fixed.acidity + volatile.acidity + sulphates + citric.acid + residual.sugar +
chlorides + free.sulfur.dioxide + total.sulfur.dioxide + density + pH + alcohol)^2,
data = red_wine)
summary(full_model_quadX)
summary(full_model_quadX)
full_model_quadX = lm(quality ~ (fixed.acidity + volatile.acidity + sulphates + citric.acid + residual.sugar +
chlorides + free.sulfur.dioxide + total.sulfur.dioxide + density + pH + alcohol)^2 +
I(fixed.acidity^2) +  I(volatile.acidity^2) + I(sulphates^2) +  I(citric.acid^2) +
I(residual.sugar^2) +  I(chlorides^2) + I(free.sulfur.dioxide^2) +  I(total.sulfur.dioxide^2) + I(density^2) +
I(pH^2) + I(alcohol^2),
data = red_wine)
summary(full_model_quadX)
forward_quad = step(empty_formula,
scope=list(upper = full_model_quadX),
direction = "forward", trace = FALSE)
backward_quad = step(full_model_quadX,
direction = "backward", trace = FALSE)
stepwise_quad = step(empty_formula,
scope=list(upper = full_model_quadX),
direction = "both", trace = FALSE)
summary(forward_quad)
summary(backward_quad)
summary(stepwise_quad)
full_model_cubic =  lm(quality ~ fixed.acidity + volatile.acidity + sulphates + citric.acid + residual.sugar +
chlorides + free.sulfur.dioxide + total.sulfur.dioxide + density + pH + alcohol + #linear Terms
I(fixed.acidity^2) +  I(volatile.acidity^2) + I(sulphates^2) +  I(citric.acid^2) +
I(residual.sugar^2) +  I(chlorides^2) + I(free.sulfur.dioxide^2) +  I(total.sulfur.dioxide^2) + I(density^2) +
I(pH^2) + I(alcohol^2) + #quadratic terms
I(fixed.acidity^3) +  I(volatile.acidity^3) + I(sulphates^3) +  I(citric.acid^3) +
I(residual.sugar^3) +  I(chlorides^3) + I(free.sulfur.dioxide^3) +  I(total.sulfur.dioxide^3) + I(density^3) +
I(pH^3) + I(alcohol^3),
data = red_wine)
forward_cubic = step(empty_formula,
scope=list(upper = full_model_cubic),
direction = "forward", trace = FALSE)
backward_cubic = step(full_model_cubic,
direction = "backward", trace = FALSE)
stepwise_cubic = step(empty_formula,
scope=list(upper = full_model_cubic),
direction = "both", trace = FALSE)
summary(forward_quadX)
summary(backward_quadX)
summary(stepwise_quadX)
summary(forward_cubic)
summary(backward_cubic)
summary(stepwise_cubic)
full_model_cubicX =  lm(quality ~ (fixed.acidity + volatile.acidity + sulphates + citric.acid + residual.sugar +
chlorides + free.sulfur.dioxide + total.sulfur.dioxide + density + pH + alcohol)^3 + #linear Terms
I(fixed.acidity^2) +  I(volatile.acidity^2) + I(sulphates^2) +  I(citric.acid^2) +
I(residual.sugar^2) +  I(chlorides^2) + I(free.sulfur.dioxide^2) +  I(total.sulfur.dioxide^2) + I(density^2) +
I(pH^2) + I(alcohol^2) + #quadratic terms
I(fixed.acidity^3) +  I(volatile.acidity^3) + I(sulphates^3) +  I(citric.acid^3) +
I(residual.sugar^3) +  I(chlorides^3) + I(free.sulfur.dioxide^3) +  I(total.sulfur.dioxide^3) + I(density^3) +
I(pH^3) + I(alcohol^3),
data = red_wine)
View(full_model_cubicX)
full_model_quadX = lm(quality ~ (fixed.acidity + volatile.acidity + sulphates + citric.acid + residual.sugar +
chlorides + free.sulfur.dioxide + total.sulfur.dioxide + density + pH + alcohol +
I(fixed.acidity^2) +  I(volatile.acidity^2) + I(sulphates^2) +  I(citric.acid^2) +
I(residual.sugar^2) +  I(chlorides^2) + I(free.sulfur.dioxide^2) +  I(total.sulfur.dioxide^2) + I(density^2) +
I(pH^2) + I(alcohol^2))^2,
data = red_wine)
forward_quadX = step(empty_formula,
scope=list(upper = full_model_quadX),
direction = "forward", trace = FALSE)
backward_quadX = step(full_model_quadX,
direction = "backward", trace = FALSE)
stepwise_quadX = step(empty_formula,
scope=list(upper = full_model_quadX),
direction = "both", trace = FALSE)
summary(forward_quadX)
summary(backward_quadX)
summary(stepwise_quadX)
View(full_model_quadX)
full_model_quadX = lm(quality ~ (fixed.acidity + volatile.acidity + sulphates + citric.acid + residual.sugar +
chlorides + free.sulfur.dioxide + total.sulfur.dioxide + density + pH + alcohol)^2 +
I(fixed.acidity^2) +  I(volatile.acidity^2) + I(sulphates^2) +  I(citric.acid^2) +
I(residual.sugar^2) +  I(chlorides^2) + I(free.sulfur.dioxide^2) +  I(total.sulfur.dioxide^2) + I(density^2) +
I(pH^2) + I(alcohol^2),
data = red_wine)
forward_quadX = step(empty_formula,
scope=list(upper = full_model_quadX),
direction = "forward", trace = FALSE)
backward_quadX = step(full_model_quadX,
direction = "backward", trace = FALSE)
stepwise_quadX = step(empty_formula,
scope=list(upper = full_model_quadX),
direction = "both", trace = FALSE)
summary(forward_quadX)
summary(backward_quadX)
summary(stepwise_quadX)
full_model_cubicX =  lm(quality ~ (fixed.acidity + volatile.acidity + sulphates + citric.acid + residual.sugar +
chlorides + free.sulfur.dioxide + total.sulfur.dioxide + density + pH + alcohol + #linear Terms
I(fixed.acidity^2) +  I(volatile.acidity^2) + I(sulphates^2) +  I(citric.acid^2) +
I(residual.sugar^2) +  I(chlorides^2) + I(free.sulfur.dioxide^2) +  I(total.sulfur.dioxide^2) + I(density^2) +
I(pH^2) + I(alcohol^2))^2 + #quadratic terms
I(fixed.acidity^3) +  I(volatile.acidity^3) + I(sulphates^3) +  I(citric.acid^3) +
I(residual.sugar^3) +  I(chlorides^3) + I(free.sulfur.dioxide^3) +  I(total.sulfur.dioxide^3) + I(density^3) +
I(pH^3) + I(alcohol^3), #cubic terms, all crossed
data = red_wine)
View(full_model_cubicX)
full_model_cubicX =  lm(quality ~ (fixed.acidity + volatile.acidity + sulphates + citric.acid + residual.sugar +
chlorides + free.sulfur.dioxide + total.sulfur.dioxide + density + pH + alcohol + #linear Terms
I(fixed.acidity^2) +  I(volatile.acidity^2) + I(sulphates^2) +  I(citric.acid^2) +
I(residual.sugar^2) +  I(chlorides^2) + I(free.sulfur.dioxide^2) +  I(total.sulfur.dioxide^2) + I(density^2) +
I(pH^2) + I(alcohol^2))^2 + #quadratic terms
I(fixed.acidity^3) +  I(volatile.acidity^3) + I(sulphates^3) +  I(citric.acid^3) +
I(residual.sugar^3) +  I(chlorides^3) + I(free.sulfur.dioxide^3) +  I(total.sulfur.dioxide^3) + I(density^3) +
I(pH^3) + I(alcohol^3), #cubic terms, all crossed
data = red_wine)
forward_cubicX = step(empty_formula,
scope=list(upper = full_model_cubicX),
direction = "forward", trace = FALSE)
backward_cubicX = step(full_model_cubicX,
direction = "backward", trace = FALSE)
stepwise_cubicX = step(empty_formula,
scope=list(upper = full_model_cubicX),
direction = "both", trace = FALSE)
summary(forward_cubicX)
summary(backward_cubicX)
summary(stepwise_cubicX)
library(glmnet)
!install.packages("glmnet")
library(glmnet)
install.packages(c("lifecycle", "mime", "pillar", "rmarkdown", "testthat", "waldo", "xfun"))
install.packages("glmnet")
library(glmnet)
library(glmnet)
library(glmnet)
library(glmnet)
library(glmnet)
bike_data = read.csv("../data/SeoulBikeData.csv")
head(bike_data)
apply(bike_data, as.numeric, 1)
apply(bike_data, as.numeric)
?apply
apply(bike_data, 1, as.numeric)
head(bike_data)
bike_data = bike_data[-1]
head(bike_data)
bike_data["Season.Winter"] = (bike_data["Seasons"] == "Winter")
head(bike_data)
bike_data["Season.Winter"] = as.numeric((bike_data["Seasons"] == "Winter"))
head(bike_data)
levels(bike_data["Seasons"])
levels(as.factor(bike_data["Seasons"]))
bike_data["Season.Spring"] = as.numeric((bike_data["Seasons"] == "Spring"))
bike_data["Season.Summer"] = as.numeric((bike_data["Seasons"] == "Summer"))
head(bike_data)
bike_data = bike_data[-"Seasons"]
head(bike_data[-11])
bike_data = bike_data[-11]
levels(as.factor(bike_data["Holiday"]))
bike_data["Holiday"] = as.numeric(bike_data["Holiday"])
bike_data
bike_data["Holiday"] = as.numeric(bike_data["Holiday"] == "Holiday")
head(bike_data)
levels(as.factor(bike_data["Functioning.Day"]))
bike_data["Functioning.Day"] = as.numeric(bike_data["Functioning.Day"] == "Yes")
head(bike_data)
write.csv(bike_data, "../data/SeoulBikeDataCleaned.csv", row.names = FALSE)
library(glmnet)
install.packages("glmnet")
version()
R -v
R
sessionInfo()
install.packages("glmnet")
full_model_quad = lm(quality ~ fixed.acidity + I(fixed.acidity^2) + volatile.acidity + I(volatile.acidity^2) +
sulphates + I(sulphates^2) + citric.acid + I(citric.acid^2) +
residual.sugar + I(residual.sugar^2) + chlorides + I(chlorides^2) +
free.sulfur.dioxide + I(free.sulfur.dioxide^2) + total.sulfur.dioxide + I(total.sulfur.dioxide^2) +
density + I(density^2) + pH + I(pH^2) + alcohol + I(alcohol^2), data = red_wine)
forward_quad = step(empty_formula,
scope=list(upper = full_model_quad),
direction = "forward", trace = FALSE)
backward_quad = step(full_model_quad,
direction = "backward", trace = FALSE)
stepwise_quad = step(empty_formula,
scope=list(upper = full_model_quad),
direction = "both", trace = FALSE)
summary(forward_quad)
summary(backward_quad)
summary(stepwise_quad)
aic(forward_quad)
AIC(forward_quad)
AIC(backward_quad)
AIC(stepwise_quad)
rsq_cv(formula(forward_quad), dataset = red_wine, response = "Quality", )
rsq_cv(formula(forward_quad), dataset = red_wine, response = "Quality", k = 10)
rsq_cv(formula(forward_quad), dataset = red_wine, response = "Quality", k = 10)
source("regression_utils.R")
rsq_cv(formula(forward_quad), dataset = red_wine, response = "Quality", k = 10)
rsq_cv(formula(forward_quad), dataset = red_wine, response = "quality", k = 10)
rsq_cv(formula(backward_quad), dataset = red_wine, response = "quality", k = 10)
rsq_cv(formula(forward_quad), dataset = red_wine, response = "quality", k = 10)
rsq_cv(formula(backward_quad), dataset = red_wine, response = "quality", k = 10)
rsq_cv(formula(stepwise_quad), dataset = red_wine, response = "quality", k = 10)
!install.packages("glmnet", "ggplot2", "reshape2")
library(glmnet)
install.packages("glmnet")
install.packages("glmnet")
library(glmnet)
install.packages("glmnet")
install.packages("glmnet")
install.packages("glmnet")
install.packages("glmnet")
install.packages("glmnet")
library(ggplot2)
library(reshape2)
library(glmnet)
source("regression_utils.R")
red_wine = read.csv("../data/WineQuality/winequality-red.csv", sep = ";")
head(red_wine)
##Exploratory Data Analysis
#correlation matrices to determine collinearity
plot_cormat(red_wine)
#reproducibility for both dataframes (red_wine, white_wine)
scatter(red_wine, "quality", col = 3, row = 4)
###feature selection
#feature selection using forward selection
full_formula = lm(quality ~ ., data = red_wine)
empty_formula = lm(quality ~ 1, data = red_wine)
library(ggplot2)
plot_cormat(red_wine)
library(reshape2)
#reproducibility for both dataframes (red_wine, white_wine)
x = model.matrix(quality ~ ., data = red_wine)
y = red_wine$quality
library(glmnet)
### Finding the opitmal lambda
lasso_lambda = cv.glmnet(s, y, alpha = 1)$lambda.min
rdige_lambda = cv.glmnet(s, y, alpha = 0)$lambda.min
### Finding the opitmal lambda
lasso_lambda = cv.glmnet(x, y, alpha = 1)$lambda.min
ridge_lambda = cv.glmnet(x, y, alpha = 0)$lambda.min
lasso_lambda
ridge_lambda
ridge = glmnet(x, y, alpha = 0, lambda = ridge_lambda)
lasso = glmnet(x, y, alpha = 1, lamdda = lasso_lambda)
summary(ridge)
coef(rdige)
coef(ridge)
coef(lasso)
coef(lasso$beta)
0*.2827+1*.6354+2*0.0699+3*0.0103+4*0.0014+5*0.002+6*0.001
0*.2827*1+.6354*2+0.0699+3*0.0103+4*0.0014+5*0.002+6*0.001
0*.2827*1+.6354*2+0.0699+3*0.0103+4*0.0014+5*0.002+6*0.001
avgmen = 0*.2827+1*.6354+2*0.0699+3*0.0103+4*0.0014+5*0.002+6*0.001
avgmen*486.094
avgmen*486,094
avgmen*486094
491735*.4748
